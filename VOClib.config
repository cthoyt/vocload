#!/bin/sh

#
# Program: VOClib.config
#
# Purpose:
#
# 	Shell Routines for running Vocabulary Loads
# 
# Usage:
#
#	execute this script from another run script (ex. runDAGIncLoad.sh)
#
# History:
#
#	lec	03/26/2003
#	- new
#

#
# Purpose:  
#	echoes Usage to stdout
#	emails log file to maintainer with subject line
#
# Parameters:
# 	$1 = Usage string
# 	$2 = subject line of email message

die()
{
   echo $1
   cat $FULL_LOG_FILE | mailx -s $2 $MAINTAINER
   exit $FAILURE
}

# Purpose:  creates directory (if it does not already exist)
#	echoes creation message to stdout
#
# Parameters:
#	$1 = directory
#

createDir()
{
   if [ ! -d $1 ]
   then
      echo "...creating data directory $1"
      mkdir $1
   fi
}

# Purpose:  sends program header info to log file
#
# Parameters:
#	$1 = program name
#

writePgmExecutionHeaders()
{
   echo "Running $1 Program..."
   echo "*****************************************" >> $FULL_LOG_FILE 2>&1
   echo "Running $1 Program..."                     >> $FULL_LOG_FILE 2>&1
   echo "*****************************************" >> $FULL_LOG_FILE 2>&1
   echo "Program call:"                             >> $FULL_LOG_FILE 2>&1
}

# Purpose:  writes program log file to full log file
#
# Parameters:
#	$1 = program name
#

writePgmLogFile()
{
   echo "$1 Log File:"                  >> $FULL_LOG_FILE 2>&1
   cat $LOAD_LOG_FILE                               >> $FULL_LOG_FILE 2>&1
   echo "*****************************************" >> $FULL_LOG_FILE 2>&1
   echo "*****************************************" >> $FULL_LOG_FILE 2>&1
}

#
# Purpose:  initialize variables, log files, etc.
#
# Parameters:
#
#	$1 = config file

setUp()
{
  JOB_SUCCESSFUL="false"

  # execute config files
  . $1
  . Configuration

  # create runtime and archive directories
  createDir $RUNTIME_DIR
  createDir $ARCHIVE_DIR

  # remove old log files, bcps
  rm -rf $FULL_LOG_FILE $MAIL_FILE_NAME $LOAD_LOG_FILE 
  rm -rf ${RUNTIME_DIR}/*.bcp ${RUNTIME_DIR}/*.html ${RUNTIME_DIR}/*.log
  touch $FULL_LOG_FILE $MAIL_FILE_NAME $LOAD_LOG_FILE

  echo "Job Started: `date`"
  echo "Job Started: `date`" >> $FULL_LOG_FILE 2>&1
  echo "Directory is: `pwd`"

  USAGE_STRING="Incorrect Usage\nCorrect Usage: $0 [load|noload] [full|incremental] \nExample: $0 load incremental"

  if [ $# -ne 3 ] 
  then
     die "$USAGE_STRING"
  fi

  echo "*****************************************" >> $FULL_LOG_FILE 2>&1
  case $2 in
     load) LOAD_FLAG=""        
     echo  "LOAD STATUS is LOAD" >> $FULL_LOG_FILE 2>&1
     ;;
     noload) LOAD_FLAG=-n      
     echo  "LOAD STATUS is NO LOAD" >> $FULL_LOG_FILE 2>&1
     ;;
     *) die "$USAGE_STRING"    ;;
  esac

  case $3 in
     incremental) MODE_FLAG=-i ;;
     full) MODE_FLAG=-f        ;;
     *) die "$USAGE_STRING"    ;;
  esac
  echo  "MODE STATUS is $2" >> $FULL_LOG_FILE 2>&1
  echo "*****************************************" >> $FULL_LOG_FILE 2>&1
}

# Purpose:
#	execute mulitple programs
#
# Parameters
#	$1 = programs
#

executePrograms()
{
  while [ "$1" != "" ]
  do
    executeProgram $1
    shift
  done
}

# Purpose:
#	execute a program; check status of program
#
# Parameters
#	$1 = programs
#

executeProgram()
{
  LOAD_PROGRAM=$1
  LOAD_PROGRAM_CALL="${LOAD_PROGRAM} $LOAD_FLAG $MODE_FLAG -l $LOAD_LOG_FILE ${RCD_FILE} ${DATA_FILE}"

  writePgmExecutionHeaders $LOAD_PROGRAM
  echo $LOAD_PROGRAM_CALL                          >> $FULL_LOG_FILE 2>&1
  echo "*****************************************" >> $FULL_LOG_FILE 2>&1

#  msg=`$LOAD_PROGRAM_CALL 2>&1`
  msg=`$LOAD_PROGRAM_CALL`
  rc=$?

  writePgmLogFile $LOAD_PROGRAM

  case $rc in
       $FAILURE)
          ERROR_MSG="${LOAD_PROGRAM} FAILED!!!! - Check Log File: $FULL_LOG_FILE"
          echo $ERROR_MSG
          echo $0:$ERROR_MSG                       >> $FULL_LOG_FILE 2>&1
          echo "$0:${LOAD_PROGRAM} Ouput is: $msg" >> $FULL_LOG_FILE 2>&1
          die "$ERROR_MSG";;

       $SUCCESS)
          ERROR_MSG="${LOAD_PROGRAM} Was Successful - No Errors Encountered"
          JOB_SUCCESSFUL="true"
          echo $ERROR_MSG
          echo $0:$ERROR_MSG                 >> $FULL_LOG_FILE 2>&1;;
  esac
  LOAD_ERROR_MSG=$ERROR_MSG
}

# Purpose
#	archive the files
#
# Using "jar" rather than "tar", because jar compressed
# the files to 6 times smaller than tar and its syntax is 
# identical to tar

archive()
{
  JAR_PROGRAM=jar
  JAR_PROGRAM_CALL="jar cvf $ARCHIVE_FILE_NAME $RUNTIME_DIR/*"

  writePgmExecutionHeaders $JAR_PROGRAM
  echo $JAR_PROGRAM_CALL                           >> $FULL_LOG_FILE 2>&1
  echo "*****************************************" >> $FULL_LOG_FILE 2>&1
  msg=`$JAR_PROGRAM_CALL  2>&1`
  rc=$?
  case $rc in
       $FAILURE)
          ERROR_MSG="JAR Failed!!!! - Check Archive"
          echo $ERROR_MSG
          echo $0:$ERROR_MSG                 >> $FULL_LOG_FILE 2>&1
          echo "$0:JAR Ouput is: $msg"       >> $FULL_LOG_FILE 2>&1;;
  
       $SUCCESS)
          ERROR_MSG="JAR Was Successful - No Errors Encountered"
          echo $ERROR_MSG
          echo $0:$ERROR_MSG                 >> $FULL_LOG_FILE 2>&1;;
     
       *)
          ERROR_MSG="JAR Had Warnings!!!  Archive"
          echo $ERROR_MSG
          echo $0:$ERROR_MSG                 >> $FULL_LOG_FILE 2>&1
          echo "$0:JAR Ouput is: $msg"       >> $FULL_LOG_FILE 2>&1;;
  
  esac
  JAR_PROGRAM_ERROR_MSG=$ERROR_MSG
}

# Purpose:
#	check job completion status and write summary to mail file
#	email mail file to maintainer(s)
#
# Parameters:
#	$1 = name of load (ex. "GO")
#	

finishUp()
{
  if test $JOB_SUCCESSFUL = "true"
  then
     SUBJECT="$VOCAB_NAME Load Successful"
  else
     SUBJECT="$VOCAB_NAME Load Failed"
  fi
  echo $SUBJECT

  echo "Run Summary:"                                                                  > $MAIL_FILE_NAME
  echo "****************************************************************************" >> $MAIL_FILE_NAME
  echo "$VOCAB_NAME Downloader Completion Status:   $DOWNLOADER_ERROR_MSG"            >> $MAIL_FILE_NAME
  echo "****************************************************************************" >> $MAIL_FILE_NAME
  echo "$VOCAB_NAME Load Program Completion Status: $LOAD_ERROR_MSG"                  >> $MAIL_FILE_NAME
  echo "****************************************************************************" >> $MAIL_FILE_NAME
  echo "Archive Program Completion Status: $JAR_PROGRAM_ERROR_MSG"                    >> $MAIL_FILE_NAME
  echo "****************************************************************************" >> $MAIL_FILE_NAME
  echo ""   >> $MAIL_FILE_NAME
  echo ""   >> $MAIL_FILE_NAME
  echo ""   >> $MAIL_FILE_NAME
  echo "Full Log File is as follows:"                                                 >> $MAIL_FILE_NAME
  echo "************************************************************************"     >> $MAIL_FILE_NAME
  echo "************************************************************************"     >> $MAIL_FILE_NAME


  echo "Job Complete: `date`"
  echo "Job Complete: `date`"                                                         >> $FULL_LOG_FILE 2>&1

  cat $MAIL_FILE_NAME $FULL_LOG_FILE | mailx -s "$SUBJECT" $MAINTAINER 
}

# $Log$
# Revision 1.5  2003/03/27 13:28:05  lec
# added call to GOverify.py
#
# Revision 1.4  2003/03/26 15:54:40  lec
# moved call to Configuration and other comman vars to VOClib.config and Configuration
#
# Revision 1.3  2003/03/26 15:50:24  lec
# moved call to Configuration and other comman vars to VOClib.config and Configuration
#
# Revision 1.2  2003/03/26 15:40:18  lec
# new
#
# Revision 1.1  2003/03/26 15:30:22  lec
# new
#
