#!/usr/local/bin/python

#
# Program: OMIMtermreport.py
#
# Original Author: Lori Corbani
#
# Purpose:
#
#	To generate report 1 of OMIM.txt term vs. MGI OMIM term
#	where the:
#		OMIM.tab id = MGI OMIM id
#		OMIM.tab term != MGI OMIM term
#
#	For example:
#		OMIM.tab id = MGI OMIM id = 244400
#		OMIM.tab term = "Ciliary Dyskinesia, Primary, 1"
#		MGI OMIM term = "Kartagener Syndrome"
#
#	Report output 1:
#
#		MGI OMIM ID
#		MGI OMIM term
#		OMIM.tab term
#
# Inputs:
#
#	/data/loads/mgi/vocload/OMIM/OMIM.tab
#
#	as is generated by OMIM.py 
#
# Outputs:
#
#	Report: OMIMtermcheck.rpt
#
# History
#
# 03/02/2017	lec
#	- TR12540
#	report 2 is now a duplicate of report 1 and is obsolete
#	report 3 is obsolete
#	added new report 2; new OMIM ids
#
# 12/23/2015	lec
#	- TR11956/added report2/moved report2 to report3
#
# 08/06/2009	lec
#	- TR9461; add report of secondary OMIM terms
#

import sys 
import os
import string
import db
import reportlib

CRT = reportlib.CRT
SPACE = reportlib.SPACE
TAB = reportlib.TAB
PAGE = reportlib.PAGE

def report1():

    fp.write('''A report of new OMIM.tab term vs. MGI OMIM term where the:
           OMIM.tab id = MGI OMIM id
           OMIM.tab term != MGI OMIM term
           ''')

    fp.write(CRT)
    fp.write(string.ljust('MGI OMIM ID', 15) + TAB)
    fp.write(string.ljust('MGI OMIM term', 65) + TAB)
    fp.write(string.ljust('OMIM.tab term', 65) + CRT*2)

    for t in mgiTerms:
        if omimTerms.has_key(t):
	    mTerm = mgiTerms[t]
	    oTerm = omimTerms[t]

	    # only print if the terms are not equal

	    if mTerm != oTerm:
	        fp.write(string.ljust(t, 15) + TAB)
	        fp.write(string.ljust(mgiTerms[t], 65) + TAB)
	        fp.write(string.ljust(omimTerms[t], 65) + CRT)

    fp.write(CRT*2)

def report2():

    fp.write('A report of new OMIM.tab terms added since the last load:\n\n')

    for t in omimTerms:
        if not mgiTerms.has_key(t):
	    fp.write(t + TAB + string.ljust(omimTerms[t], 65) + CRT)

    fp.write(CRT*2)

def init():

    global omimTerms, mgiTerms

    # grab the new OMIM terms
    for line in inFile.readlines():
        tokens = string.split(line[:-1], '\t')
        term = tokens[0]
        id = tokens[1]
        omimTerms[id] = term

    inFile.close()

    # grab the existing OMIM terms in MGI
    results = db.sql('''select a.accID, t.term
        from VOC_Term t, ACC_Accession a
        where t._Vocab_key = 44
        and t._Term_key = a._Object_key 
        and a._MGIType_key = 13 
        and a.preferred = 1
        order by t.term, a.accID
        ''', 'auto')

    for r in results:
        term = r['term']
        id = r['accID']
        mgiTerms[id] = term

#
# Main
#

fp = reportlib.init(sys.argv[0], printHeading = 0, outputdir = os.environ['RUNTIME_DIR'], fileExt = '.' + os.environ['DATE'] + '.rpt')
os.system('rm -rf ${RUNTIME_DIR}/OMIMtermcheck.current.rpt')
os.system('ln -s ${RUNTIME_DIR}/OMIMtermcheck.${DATE}.rpt ${RUNTIME_DIR}/OMIMtermcheck.current.rpt')

# this is the data file generated by OMIM.py/see OMIM.config
inFile = open(os.environ['DATA_FILE'], 'r')

omimTerms = {}
mgiTerms = {}

init()
report1()
report2()
reportlib.finish_nonps(fp)	# non-postscript file

