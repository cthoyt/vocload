#!/usr/local/bin/python

#
# Program: OMIMtermreport.py
#
# Original Author: Lori Corbani
#
# Purpose:
#
#	To generate a report of OMIM.txt term vs. MGI OMIM term
#	where the:
#		OMIM.tab id = MGI OMIM id
#		OMIM.tab term != MGI OMIM term
#		MGI OMIM id contains genotype annotations
#
#	For example:
#		OMIM.tab id = MGI OMIM id = 244400
#		OMIM.tab term = "Ciliary Dyskinesia, Primary, 1"
#		MGI OMIM term = "Kartagener Syndrome"
#
#	Report output:
#
#		MGI OMIM ID
#		MGI OMIM term
#		OMIM.tab term
#		MGI ID of the Genotype annotations
#
# Inputs:
#
#	/data/loads/mgi/vocload/OMIM/OMIM.tab
#
#	as is generated by OMIM.py 
#
# Outputs:
#
#	Report: OMIMtermcheck.rpt
#
# History
#

import sys 
import os
import string
import db
import reportlib

CRT = reportlib.CRT
SPACE = reportlib.SPACE
TAB = reportlib.TAB
PAGE = reportlib.PAGE

#
# Main
#

fp = reportlib.init(sys.argv[0], printHeading = 0, outputdir = os.environ['RUNTIME_DIR'])

fp.write('''A report of new OMIM.tab term vs. MGI OMIM term where the:
       OMIM.tab id = MGI OMIM id
       OMIM.tab term != MGI OMIM term
       MGI OMIM id contains genotype annotations
       ''')

fp.write(CRT)
fp.write(string.ljust('MGI OMIM ID', 15) + TAB)
fp.write(string.ljust('MGI OMIM term', 45) + TAB)
fp.write(string.ljust('OMIM.tab term', 45) + TAB)
fp.write('MGI ID of the Genotype annotations' + CRT*2)

# this is the data file generated by OMIM.py/see OMIM.config
inFile = open(os.environ['DATA_FILE'], 'r')

omimTerms = {}
mgiTerms = {}
genotypes = {}

# grab the new OMIM terms
for line in inFile.readlines():
    tokens = string.split(line[:-1], '\t')
    term = tokens[0]
    id = tokens[1]
    omimTerms[id] = term
inFile.close()

# grab the existing OMIM terms in MGI
results = db.sql('''select a.accID, t.term
    from VOC_Term t, ACC_Accession a, VOC_Annot aa
    where t._Vocab_key = 44
    and t._Term_key = a._Object_key 
    and a._MGIType_key = 13 
    and a.preferred = 1
    and t._Term_key = aa._Term_key
    and aa._AnnotType_key = 1005
    order by t.term
    ''', 'auto')

for r in results:
    term = r['term']
    id = r['accID']
    mgiTerms[id] = term

# grab genotypes that exist for MGI OMIM terms
results = db.sql('''select a.accID, genotypeID = g.accID
    from VOC_Term t, VOC_Annot aa, ACC_Accession a, ACC_Accession g
    where t._Vocab_key = 44
    and t._Term_key = a._Object_key
    and a._MGIType_key = 13 
    and a.preferred = 1
    and t._Term_key = aa._Term_key 
    and aa._AnnotType_key = 1005
    and aa._Object_key = g._Object_key 
    and g._MGIType_key = 12 
    order by t.term
    ''', 'auto')

for r in results:
    genotypeID = r['genotypeID']
    id = r['accID']
    if not genotypes.has_key(id):
        genotypes[id] = []
    genotypes[id].append(genotypeID)

#
# do comparison
#

for t in mgiTerms:
    if omimTerms.has_key(t):
	mTerm = mgiTerms[t]
	oTerm = omimTerms[t]

	# only print if the terms are not equal
	# and the term has a genotype annotation

	if mTerm != oTerm and genotypes.has_key(t):
	    fp.write(string.ljust(t, 15) + TAB)
	    fp.write(string.ljust(mgiTerms[t], 45) + TAB)
	    fp.write(string.ljust(omimTerms[t], 45) + TAB)
	    fp.write(string.join(genotypes[t], ',') + CRT)

reportlib.finish_nonps(fp)	# non-postscript file

